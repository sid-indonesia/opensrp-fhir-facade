plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
	id "com.diffplug.spotless" version "6.1.0"
}

group = 'org.sidindonesia'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://nexus.sid-indonesia.org/repository/maven-snapshots"
		mavenContent {
			snapshotsOnly()
		}
	}
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots"
		mavenContent {
			snapshotsOnly()
		}
	}
}

dependencies {
// implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-base', version: "${hapiFhirVersion}"
	implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-r4', version: "${hapiFhirVersion}"
	implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-server', version: "${hapiFhirVersion}"
	implementation("org.smartregister:opensrp-server-api:${opensrpApiVersion}") {
	exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	implementation "org.smartregister:hapi-fhir-keycloak:0.0.6-SNAPSHOT"
	//implementation "org.keycloak:keycloak-spring-boot-starter"
	//implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

spotless {
// optional: limit format enforcement to just the files changed by this feature branch
ratchetFrom 'origin/main'

format 'misc', {
	// define the files to apply `misc` to
	target '*.gradle', '*.md', '.gitignore'

	// define the steps to apply to those files
	trimTrailingWhitespace()
	indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
	endWithNewline()
}
java {
	// don't need to set target, it is inferred from java

	// apply a specific flavor of google-java-format
	//googleJavaFormat('1.13.0').aosp().reflowLongStrings()

	// apply flavor of eclipse
	eclipse()

	// make sure every file has the following copyright header.
	// optionally, Spotless can set copyright years by digging
	// through git history (see "license" section below)
	licenseHeader '/* (C)$YEAR */'
}
}
